const t="expert-012",a="Function Call Parameter Extractor",e="Code analysis tools need to parse function calls with parameters. These calls have a function name (letters/underscores), followed by parentheses containing comma-separated parameters. Parameters can be numbers, quoted strings, or identifiers. Parse valid function invocations.",n="expert",s=[{input:'func(123, "hello", var_name)',shouldMatch:!0},{input:"calculate(42)",shouldMatch:!0},{input:'process("string", 456, identifier)',shouldMatch:!0},{input:"simple_func()",shouldMatch:!0},{input:"func(123,)",shouldMatch:!1},{input:"func(,123)",shouldMatch:!1},{input:"123(param)",shouldMatch:!1},{input:"func[123]",shouldMatch:!1}],o='^[a-zA-Z_][a-zA-Z0-9_]*\\(((\\d+|"[^"]*"|[a-zA-Z_][a-zA-Z0-9_]*)(, ?(\\d+|"[^"]*"|[a-zA-Z_][a-zA-Z0-9_]*))*)?\\)$',r='Uses function name pattern, parameter alternation (\\d+|"[^"]*"|[a-zA-Z_][a-zA-Z0-9_]*), and repetition for comma-separated params. Demonstrates complex alternation and repetition for parsing structured syntax.',i={id:t,title:a,description:e,difficulty:n,testCases:s,solution:o,solutionSummary:r};export{i as default,e as description,n as difficulty,t as id,o as solution,r as solutionSummary,s as testCases,a as title};

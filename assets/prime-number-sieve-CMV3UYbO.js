const x="nightmare-003",t="Prime Number Sieve",e="Match unary strings (sequences of 'x') whose length is a prime number.",s="nightmare",n=[{input:"xx",shouldMatch:!0},{input:"xxx",shouldMatch:!0},{input:"xxxxx",shouldMatch:!0},{input:"xxxxxxx",shouldMatch:!0},{input:"xxxxxxxxxxx",shouldMatch:!0},{input:"xxxxxxxxxxxxx",shouldMatch:!0},{input:"x",shouldMatch:!1},{input:"xxxx",shouldMatch:!1},{input:"xxxxxx",shouldMatch:!1},{input:"xxxxxxxx",shouldMatch:!1},{input:"xxxxxxxxx",shouldMatch:!1},{input:"xxxxxxxxxx",shouldMatch:!1}],u="^(?!(xx+?)\\1+$)xx+$",o="This regex uses a negative lookahead to determine if a number (represented in unary) is prime. It asserts that the string of 'x's cannot be composed of a smaller, repeating substring of 'x's (of length 2 or more). If such a repeating pattern exists, the number is composite. If no such pattern can be found, the number is prime. The pattern only checks strings of length 2 or more.",i={id:x,title:t,description:e,difficulty:s,testCases:n,solution:u,solutionSummary:o};export{i as default,e as description,s as difficulty,x as id,u as solution,o as solutionSummary,n as testCases,t as title};

const t="hard-005",a="Version Number Archaeologist",e="Find software version numbers that follow standard format. They have three numbers separated by dots and might have extra labels like -alpha or -beta.",s="hard",o=[{input:"1.0.0",shouldMatch:!0},{input:"12.34.56",shouldMatch:!0},{input:"0.1.0",shouldMatch:!0},{input:"1.0.0-alpha",shouldMatch:!0},{input:"2.1.0-beta.1",shouldMatch:!0},{input:"1.0.0+build.123",shouldMatch:!0},{input:"v1.0.0",shouldMatch:!1},{input:"1.0",shouldMatch:!1},{input:"1.0.0.0",shouldMatch:!1},{input:"1.0.a",shouldMatch:!1},{input:"01.0.0",shouldMatch:!1},{input:"1.0.0-",shouldMatch:!1}],i="^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",l="This pattern validates semantic version numbers (major.minor.patch) by ensuring each number doesn't start with zero unless it's just '0'. The (?:...)? makes pre-release versions optional (like -alpha), and (?:\\+...)? makes build metadata optional (like +build.123). The complex character classes prevent leading zeros while allowing valid version identifiers.",n={id:t,title:a,description:e,difficulty:s,testCases:o,solution:i,solutionSummary:l};export{n as default,e as description,s as difficulty,t as id,i as solution,l as solutionSummary,o as testCases,a as title};

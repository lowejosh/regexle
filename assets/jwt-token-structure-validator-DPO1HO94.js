const t="hard-017",a="JWT Token Structure Validator",e="Authentication systems need to validate JWT token structure. These tokens have three parts separated by dots: header.payload.signature. Each part contains base64url-encoded data (letters, numbers, hyphens, underscores). Validate the basic JWT structure.",s="hard",r=[{input:"eyJhbGciOiJIUzI1NiI.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIn0.Gir8R7CSg89nm0G9Ps0p7aL7HgfSGMsD8VpdxdTdCro",shouldMatch:!0},{input:"abc123.def456.ghi789",shouldMatch:!0},{input:"A-_1.B-_2.C-_3",shouldMatch:!0},{input:"header123.payload456.signature789",shouldMatch:!0},{input:"part1.part2",shouldMatch:!1},{input:"part1.part2.part3.part4",shouldMatch:!1},{input:"part1..part3",shouldMatch:!1},{input:".part2.part3",shouldMatch:!1}],o="^[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+$",u="Uses base64url character class [A-Za-z0-9_-]+ for each part, escaped dots \\. as separators, and anchors for exact three-part structure. Demonstrates structured token validation with specific character sets.",c={id:t,title:a,description:e,difficulty:s,testCases:r,solution:o,solutionSummary:u};export{c as default,e as description,s as difficulty,t as id,o as solution,u as solutionSummary,r as testCases,a as title};

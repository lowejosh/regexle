const e="expert-006",t="UUID Identifier",a="Find valid Universally Unique Identifiers (UUIDs) in their canonical 8-4-4-4-12 hexadecimal format.",i="expert",s=[{input:"123e4567-e89b-12d3-a456-426614174000",shouldMatch:!0},{input:"a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",shouldMatch:!0},{input:"DEADBEEF-CAFE-BABE-FADE-D15EA5EBEEF5",shouldMatch:!0},{input:"00000000-0000-0000-0000-000000000000",shouldMatch:!0},{input:"123e4567-e89b-12d3-a456-42661417400",shouldMatch:!1},{input:"123e4567e89b12d3a456426614174000",shouldMatch:!1},{input:"123e4567-e89b-12d3-a456-42661417400G",shouldMatch:!1},{input:"123e4567-e89b-12d3-a456",shouldMatch:!1}],n="^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",c="This pattern validates UUIDs by strictly enforcing the 8-4-4-4-12 structure. Each section `[0-9a-fA-F]{n}` matches exactly `n` hexadecimal characters (case-insensitive). The hyphens are matched literally. This is a precise and common use of regex for format validation.",o={id:e,title:t,description:a,difficulty:i,testCases:s,solution:n,solutionSummary:c};export{o as default,a as description,i as difficulty,e as id,n as solution,c as solutionSummary,s as testCases,t as title};

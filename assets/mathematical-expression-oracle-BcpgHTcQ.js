const t="expert-004",e="Mathematical Expression Oracle",a="Recognize computational formulas that combine numbers with arithmetic operations. These expressions contain numeric values connected by mathematical operators, following standard algebraic notation conventions.",s="expert",n=[{input:"2+3",shouldMatch:!0},{input:"10-5",shouldMatch:!0},{input:"4*7",shouldMatch:!0},{input:"15/3",shouldMatch:!0},{input:"(2+3)*4",shouldMatch:!0},{input:"12.5+3.7",shouldMatch:!0},{input:"2++3",shouldMatch:!1},{input:"2+",shouldMatch:!1},{input:"+3",shouldMatch:!1},{input:"2+(3*)",shouldMatch:!1},{input:"((2+3)",shouldMatch:!1},{input:"2**/3",shouldMatch:!1}],i="^(?:\\()?-?\\d+(?:\\.\\d+)?(?:[+\\-*/](?:\\()?-?\\d+(?:\\.\\d+)?(?:\\))?)*(?:\\)?(?:[+\\-*/](?:\\()?-?\\d+(?:\\.\\d+)?(?:\\))?)*)*$",o="This pattern validates mathematical expressions by allowing optional parentheses (?:\\()?, optional negative signs -?, digits with optional decimals \\d+(?:\\.\\d+)?, and operators [+\\-*/]. The nested (?:...)* structures handle multiple operations while ensuring each number can be optionally wrapped in parentheses, creating flexible expression matching.",l={id:t,title:e,description:a,difficulty:s,testCases:n,solution:i,solutionSummary:o};export{l as default,a as description,s as difficulty,t as id,i as solution,o as solutionSummary,n as testCases,e as title};
